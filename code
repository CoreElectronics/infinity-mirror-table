/*
 * v1.2
 *
 * This program drives the Core Electronics Infinity-Mirror project
 * Powered by Core Electronics
 * August 2017
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include "Particle.h"
#include "neopixel.h"
#include <math.h>

// Define LED strip parameters
#define PIXEL_PIN D0
#define PIXEL_COUNT 160

// Particle use 12bit ADCs. If you wish to port to a different micro you might need to redefine the ADC precision
#define ADC_PREC 4095

// States for the state-machine
#define STATE_OFF 0
#define STATE_RAINBOW 1
#define STATE_SOLID 2
#define STATE_COMET 3



SYSTEM_MODE(SEMI_AUTOMATIC);

/*
 * Hardware Definitions
 * potentiometers are used as easily reconfigurable controls
 */

int pot_1 = 2; // left    - selects the mode
int pot_2 = 1; // middle  - use varies between demos. Can control animation speed or colour
int pot_3 = 0; // right   - use varies between demos. Can control brightness of white
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN);


void setup()
{
    strip.begin();
    strip.show(); // Initialize all pixels to off
}


void loop()
{
    
    if (System.buttonPushed() > 1) {
        if( !Particle.connected() ){
            Particle.connect();
        }
    }
    
    
    // Read potentiometer values for user-input
    int state = getState(pot_1);    // Select the operation mode
    int opt1 = analogRead(pot_2);   // Select animation speed
    int opt2 = analogRead(pot_3);   // A general-purpose option for other effects
    
    
    // State Machine
    switch(state){
        case STATE_OFF:
            clearStrip();   // "Off" state.
            break;
        
        case STATE_RAINBOW:
            rainbow(pot_2); // Adafruit's rainbow demo, modified for seamless wraparound. We are passing the Pot # instead of the option because delay value needs to be updated WITHIN the rainbow function. Not just at the start of each main loop.
            break;
        
        case STATE_SOLID:
            solid(opt1, opt2); // Show user-set solid colour.
            break;
            
        case STATE_COMET:
            demo(); // An under-construction comet demo.
            break;
            
        default:
            break;
        
    }
}


/* Break potentiometer rotation into four sectors for setting mode
 * edit - Breaking pot into flexible segmentation for ease of adding/removing modes. */
int getState(int pot){
    float val = analogRead(pot);

    // Add all selectable modes to the array in the order you want them to appear via the pot .. you are been warned ;)
    string a[] = {  "STATE_OFF",
                    "STATE_RAINBOW",
                    "STATE_SOLID",
                    "STATE_COMET"
    };
    float aValNum = (sizeof(a)/sizeof(*a));     // Number of Array Values
    float PotSegLength = ADC_PREC / aValNum;    // Holds the segment length of each state assigned to the pot
    float PrevSegMax;   // Use for holding the "maximum value" of the preceeding segment being evaluated
    float CurrSegMax;   // Current segment's Maximum value
    int i;              // iteration for loop
    
    for (i = 0; i < aValNum; i++ ) {
        CurrSegMax = (i + 1) * PotSegLength;    // Set the current segment maximum
        if (i > 0) {
            PrevSegMax = (i * PotSegLength);    // Set the previous segment maximum
        }
        else {
            PrevSegMax = 0;                     // first segment minimum
        }

        if (val > PrevSegMax && val <= CurrSegMax) {
            //std::cout << "Seg ~Min [" << PrevSegMax << "]. Seg Max[" << CurrSegMax << "]." << std::endl;
            //std::cout << "User Input[" << val << "] within the segment of this mode: [" << a[i] << "]." << std::endl;
            return a[i];
        }
    }
        
    /*if (val < ADC_PREC / 4) {
        return STATE_OFF;
    } else if (val < ADC_PREC / 2) {
        return STATE_RAINBOW;
    } else if (val < 3*ADC_PREC / 4) {
        return STATE_SOLID;
    } else {
        return STATE_COMET;
    }*/
}


// Convert an ADC reading into a 0-100ms delay
int getDelay(int pot){
    float potVal = analogRead(pot);
    return map(potVal,0,ADC_PREC,100,0);
}


/* Run the comet demo
 * This feature is largely experimental and quite incomplete.
 * The idea is to involve multiple comets that can interact by colour-addition
 */
void demo(void){
    uint16_t i, j, k;
    uint16_t ofs = 15;
    
    for (j=0; j<strip.numPixels(); j++){
        clearStrip();
        
        comet(j,1);
        
        strip.show();
        delay(5);
        if(getState(pot_1) != STATE_COMET) break; // Check if mode knob is still on this mode
    }
}


/*
 * Draw a comet on the strip and handle wrapping gracefully.
 * Arguments:
 *      - pos: the pixel index of the comet's head
 *      - dir: the direction that the tail should point
 *
 * TODO: 
 *      - Handle direction gracefully. In the works but broken.
 *      - Handle multiple comets
 */ 
void comet(uint16_t pos, bool dir) {
    float headBrightness = 255;                 // Brightness of the first LED in the comet
    uint8_t bright = uint8_t(headBrightness);   // Initialise the brightness variable
    uint16_t len = 20;                          // Length of comet tail
    double lambda = 0.3;                        // Parameter that effects how quickly the comet tail dims
    double dim = lambda;                        // initialise exponential decay function
    
    strip.setPixelColor(pos, strip.Color(0,bright,0)); // Head of the comet
    
    
    if(dir) {
        for(uint16_t i=1; i<len; i++){
            // Figure out if the current pixel is wrapped across the strip ends or not, light that pixel
            if( pos - i < 0 ){ // Wrapped
                strip.setPixelColor(strip.numPixels()+pos-i, strip.Color(0,bright,0));
            } else { // Not wrapped
                strip.setPixelColor(pos-i, strip.Color(0,bright,0));
            }
            bright = uint8_t(headBrightness * exp(-dim)); // Exponential decay function to dim tail LEDs
            dim += lambda;
        }
        
    } else { // Comet is going backwards *** BROKEN: TODO fix ***
        for(uint16_t i=1; i<len; i++){
            // Figure out if the current pixel is wrapped across the strip ends or not, light that pixel
            if( pos + i > strip.numPixels() ){ // Wrapped
                strip.setPixelColor(strip.numPixels()-pos-i, strip.Color(0,bright,0));
            } else { // Not wrapped
                strip.setPixelColor(pos+i, strip.Color(0,bright,0));
            }
            // Dim the tail of the worm. This probably isn't the best way to do it, but it'll do for now. 
            // TODO: dim while respecting the length of the worm. For long worms this will dim to zero before the end of worm is reached.
            bright *= 0.75;
        }
    }
}


void clearStrip(void){
    uint16_t i;
    for(i=0; i<strip.numPixels(); i++){
            strip.setPixelColor(i, strip.Color(0,0,0));
        }
        strip.show();
        delay(1);
}


void rainbow(int pot) {
//   uint16_t j;
  float i, baseCol;
  float colStep = 256.0 / strip.numPixels();

  for(baseCol=0; baseCol<256; baseCol++) { // Loop through all colours
    for(i=0; i<strip.numPixels(); i++) {   // Loop through all pixels
        strip.setPixelColor( i, Wheel(int(i*(colStep)+baseCol) & 255) ); // This line seamlessly wraps the colour around the table.
    }
    strip.show();
    delay(getDelay(pot));
    
    if(getState(pot_1) != STATE_RAINBOW) break; // Check if mode knob is still on this mode
  }
}


// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}


// Display a single solid colour from the Wheel(), or show white with variable brightness
int solid(int colour, int bright){
    bright = map(bright,0,ADC_PREC,5,255);
    int col = map(colour,0,ADC_PREC,0,255);
    uint16_t i;
    
    if (col > 245) {
        // Set to white
        for(i=0; i<strip.numPixels(); i++){
            strip.setPixelColor(i, strip.Color(bright,bright,bright));
        }
        
    } else {
        // User-defined colour
        for(i=0; i<strip.numPixels(); i++){
                strip.setPixelColor(i, Wheel(col));
        }
    }    
    strip.show();
    delay(50);
}
